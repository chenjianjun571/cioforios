// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jsbn_bss.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "jsbn_bss.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace jsbn {
    namespace protoc {
        
        void protobuf_ShutdownFile_jsbn_5fbss_2eproto() {
            delete LoginRequest::default_instance_;
            delete LoginResponse::default_instance_;
            delete BSSNetProtocol::default_instance_;
        }
        
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        void protobuf_AddDesc_jsbn_5fbss_2eproto_impl() {
            GOOGLE_PROTOBUF_VERIFY_VERSION;
            
#else
            void protobuf_AddDesc_jsbn_5fbss_2eproto() {
                static bool already_here = false;
                if (already_here) return;
                already_here = true;
                GOOGLE_PROTOBUF_VERIFY_VERSION;
                
#endif
                LoginRequest::default_instance_ = new LoginRequest();
                LoginResponse::default_instance_ = new LoginResponse();
                BSSNetProtocol::default_instance_ = new BSSNetProtocol();
                LoginRequest::default_instance_->InitAsDefaultInstance();
                LoginResponse::default_instance_->InitAsDefaultInstance();
                BSSNetProtocol::default_instance_->InitAsDefaultInstance();
                ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_jsbn_5fbss_2eproto);
            }
            
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
            GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_jsbn_5fbss_2eproto_once_);
            void protobuf_AddDesc_jsbn_5fbss_2eproto() {
                ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_jsbn_5fbss_2eproto_once_,
                                                   &protobuf_AddDesc_jsbn_5fbss_2eproto_impl);
            }
#else
            // Force AddDescriptors() to be called at static initialization time.
            struct StaticDescriptorInitializer_jsbn_5fbss_2eproto {
                StaticDescriptorInitializer_jsbn_5fbss_2eproto() {
                    protobuf_AddDesc_jsbn_5fbss_2eproto();
                }
            } static_descriptor_initializer_jsbn_5fbss_2eproto_;
#endif
            bool MSG_IsValid(int value) {
                switch(value) {
                    case 0:
                    case 4097:
                    case 4098:
                        return true;
                    default:
                        return false;
                }
            }
            
            
            // ===================================================================
            
#ifndef _MSC_VER
            const int LoginRequest::kUsernameFieldNumber;
            const int LoginRequest::kPasswordFieldNumber;
#endif  // !_MSC_VER
            
            LoginRequest::LoginRequest()
            : ::google::protobuf::MessageLite() {
                SharedCtor();
                // @@protoc_insertion_point(constructor:jsbn.protoc.LoginRequest)
            }
            
            void LoginRequest::InitAsDefaultInstance() {
            }
            
            LoginRequest::LoginRequest(const LoginRequest& from)
            : ::google::protobuf::MessageLite() {
                SharedCtor();
                MergeFrom(from);
                // @@protoc_insertion_point(copy_constructor:jsbn.protoc.LoginRequest)
            }
            
            void LoginRequest::SharedCtor() {
                ::google::protobuf::internal::GetEmptyString();
                _cached_size_ = 0;
                username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
                password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
                ::memset(_has_bits_, 0, sizeof(_has_bits_));
            }
            
            LoginRequest::~LoginRequest() {
                // @@protoc_insertion_point(destructor:jsbn.protoc.LoginRequest)
                SharedDtor();
            }
            
            void LoginRequest::SharedDtor() {
                if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
                    delete username_;
                }
                if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
                    delete password_;
                }
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
                if (this != &default_instance()) {
#else
                    if (this != default_instance_) {
#endif
                    }
                }
                
                void LoginRequest::SetCachedSize(int size) const {
                    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
                    _cached_size_ = size;
                    GOOGLE_SAFE_CONCURRENT_WRITES_END();
                }
                const LoginRequest& LoginRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
                    protobuf_AddDesc_jsbn_5fbss_2eproto();
#else
                    if (default_instance_ == NULL) protobuf_AddDesc_jsbn_5fbss_2eproto();
#endif
                    return *default_instance_;
                }
                
                LoginRequest* LoginRequest::default_instance_ = NULL;
                
                LoginRequest* LoginRequest::New() const {
                    return new LoginRequest;
                }
                
                void LoginRequest::Clear() {
                    if (_has_bits_[0 / 32] & 3) {
                        if (has_username()) {
                            if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
                                username_->clear();
                            }
                        }
                        if (has_password()) {
                            if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
                                password_->clear();
                            }
                        }
                    }
                    ::memset(_has_bits_, 0, sizeof(_has_bits_));
                    mutable_unknown_fields()->clear();
                }
                
                bool LoginRequest::MergePartialFromCodedStream(
                                                               ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
                    ::google::protobuf::uint32 tag;
                    ::google::protobuf::io::StringOutputStream unknown_fields_string(
                                                                                     mutable_unknown_fields());
                    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
                                                                                    &unknown_fields_string);
                    // @@protoc_insertion_point(parse_start:jsbn.protoc.LoginRequest)
                    for (;;) {
                        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
                        tag = p.first;
                        if (!p.second) goto handle_unusual;
                        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                                // required bytes username = 1;
                            case 1: {
                                if (tag == 10) {
                                    DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                                                                                                input, this->mutable_username()));
                                } else {
                                    goto handle_unusual;
                                }
                                if (input->ExpectTag(18)) goto parse_password;
                                break;
                            }
                                
                                // required string password = 2;
                            case 2: {
                                if (tag == 18) {
                                parse_password:
                                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                                                                                 input, this->mutable_password()));
                                } else {
                                    goto handle_unusual;
                                }
                                if (input->ExpectAtEnd()) goto success;
                                break;
                            }
                                
                            default: {
                            handle_unusual:
                                if (tag == 0 ||
                                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                                    goto success;
                                }
                                DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                                                                                            input, tag, &unknown_fields_stream));
                                break;
                            }
                        }
                    }
                success:
                    // @@protoc_insertion_point(parse_success:jsbn.protoc.LoginRequest)
                    return true;
                failure:
                    // @@protoc_insertion_point(parse_failure:jsbn.protoc.LoginRequest)
                    return false;
#undef DO_
                }
                
                void LoginRequest::SerializeWithCachedSizes(
                                                            ::google::protobuf::io::CodedOutputStream* output) const {
                    // @@protoc_insertion_point(serialize_start:jsbn.protoc.LoginRequest)
                    // required bytes username = 1;
                    if (has_username()) {
                        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
                                                                                             1, this->username(), output);
                    }
                    
                    // required string password = 2;
                    if (has_password()) {
                        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                                                                                              2, this->password(), output);
                    }
                    
                    output->WriteRaw(unknown_fields().data(),
                                     unknown_fields().size());
                    // @@protoc_insertion_point(serialize_end:jsbn.protoc.LoginRequest)
                }
                
                int LoginRequest::ByteSize() const {
                    int total_size = 0;
                    
                    if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
                        // required bytes username = 1;
                        if (has_username()) {
                            total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::BytesSize(
                                                                                    this->username());
                        }
                        
                        // required string password = 2;
                        if (has_password()) {
                            total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::StringSize(
                                                                                     this->password());
                        }
                        
                    }
                    total_size += unknown_fields().size();
                    
                    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
                    _cached_size_ = total_size;
                    GOOGLE_SAFE_CONCURRENT_WRITES_END();
                    return total_size;
                }
                
                void LoginRequest::CheckTypeAndMergeFrom(
                                                         const ::google::protobuf::MessageLite& from) {
                    MergeFrom(*::google::protobuf::down_cast<const LoginRequest*>(&from));
                }
                
                void LoginRequest::MergeFrom(const LoginRequest& from) {
                    GOOGLE_CHECK_NE(&from, this);
                    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
                        if (from.has_username()) {
                            set_username(from.username());
                        }
                        if (from.has_password()) {
                            set_password(from.password());
                        }
                    }
                    mutable_unknown_fields()->append(from.unknown_fields());
                }
                
                void LoginRequest::CopyFrom(const LoginRequest& from) {
                    if (&from == this) return;
                    Clear();
                    MergeFrom(from);
                }
                
                bool LoginRequest::IsInitialized() const {
                    if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
                    
                    return true;
                }
                
                void LoginRequest::Swap(LoginRequest* other) {
                    if (other != this) {
                        std::swap(username_, other->username_);
                        std::swap(password_, other->password_);
                        std::swap(_has_bits_[0], other->_has_bits_[0]);
                        _unknown_fields_.swap(other->_unknown_fields_);
                        std::swap(_cached_size_, other->_cached_size_);
                    }
                }
                
                ::std::string LoginRequest::GetTypeName() const {
                    return "jsbn.protoc.LoginRequest";
                }
                
                
                // ===================================================================
                
#ifndef _MSC_VER
                const int LoginResponse::kResultFieldNumber;
                const int LoginResponse::kErrorDescriptionFieldNumber;
#endif  // !_MSC_VER
                
                LoginResponse::LoginResponse()
                : ::google::protobuf::MessageLite() {
                    SharedCtor();
                    // @@protoc_insertion_point(constructor:jsbn.protoc.LoginResponse)
                }
                
                void LoginResponse::InitAsDefaultInstance() {
                }
                
                LoginResponse::LoginResponse(const LoginResponse& from)
                : ::google::protobuf::MessageLite() {
                    SharedCtor();
                    MergeFrom(from);
                    // @@protoc_insertion_point(copy_constructor:jsbn.protoc.LoginResponse)
                }
                
                void LoginResponse::SharedCtor() {
                    ::google::protobuf::internal::GetEmptyString();
                    _cached_size_ = 0;
                    result_ = 0u;
                    error_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
                    ::memset(_has_bits_, 0, sizeof(_has_bits_));
                }
                
                LoginResponse::~LoginResponse() {
                    // @@protoc_insertion_point(destructor:jsbn.protoc.LoginResponse)
                    SharedDtor();
                }
                
                void LoginResponse::SharedDtor() {
                    if (error_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
                        delete error_description_;
                    }
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
                    if (this != &default_instance()) {
#else
                        if (this != default_instance_) {
#endif
                        }
                    }
                    
                    void LoginResponse::SetCachedSize(int size) const {
                        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
                        _cached_size_ = size;
                        GOOGLE_SAFE_CONCURRENT_WRITES_END();
                    }
                    const LoginResponse& LoginResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
                        protobuf_AddDesc_jsbn_5fbss_2eproto();
#else
                        if (default_instance_ == NULL) protobuf_AddDesc_jsbn_5fbss_2eproto();
#endif
                        return *default_instance_;
                    }
                    
                    LoginResponse* LoginResponse::default_instance_ = NULL;
                    
                    LoginResponse* LoginResponse::New() const {
                        return new LoginResponse;
                    }
                    
                    void LoginResponse::Clear() {
                        if (_has_bits_[0 / 32] & 3) {
                            result_ = 0u;
                            if (has_error_description()) {
                                if (error_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
                                    error_description_->clear();
                                }
                            }
                        }
                        ::memset(_has_bits_, 0, sizeof(_has_bits_));
                        mutable_unknown_fields()->clear();
                    }
                    
                    bool LoginResponse::MergePartialFromCodedStream(
                                                                    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
                        ::google::protobuf::uint32 tag;
                        ::google::protobuf::io::StringOutputStream unknown_fields_string(
                                                                                         mutable_unknown_fields());
                        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
                                                                                        &unknown_fields_string);
                        // @@protoc_insertion_point(parse_start:jsbn.protoc.LoginResponse)
                        for (;;) {
                            ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
                            tag = p.first;
                            if (!p.second) goto handle_unusual;
                            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                                    // required fixed32 result = 1;
                                case 1: {
                                    if (tag == 13) {
                                        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                             ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                                                                                                                                     input, &result_)));
                                        set_has_result();
                                    } else {
                                        goto handle_unusual;
                                    }
                                    if (input->ExpectTag(18)) goto parse_error_description;
                                    break;
                                }
                                    
                                    // optional bytes error_description = 2;
                                case 2: {
                                    if (tag == 18) {
                                    parse_error_description:
                                        DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                                                                                                    input, this->mutable_error_description()));
                                    } else {
                                        goto handle_unusual;
                                    }
                                    if (input->ExpectAtEnd()) goto success;
                                    break;
                                }
                                    
                                default: {
                                handle_unusual:
                                    if (tag == 0 ||
                                        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                                        goto success;
                                    }
                                    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                                                                                                input, tag, &unknown_fields_stream));
                                    break;
                                }
                            }
                        }
                    success:
                        // @@protoc_insertion_point(parse_success:jsbn.protoc.LoginResponse)
                        return true;
                    failure:
                        // @@protoc_insertion_point(parse_failure:jsbn.protoc.LoginResponse)
                        return false;
#undef DO_
                    }
                    
                    void LoginResponse::SerializeWithCachedSizes(
                                                                 ::google::protobuf::io::CodedOutputStream* output) const {
                        // @@protoc_insertion_point(serialize_start:jsbn.protoc.LoginResponse)
                        // required fixed32 result = 1;
                        if (has_result()) {
                            ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->result(), output);
                        }
                        
                        // optional bytes error_description = 2;
                        if (has_error_description()) {
                            ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
                                                                                                 2, this->error_description(), output);
                        }
                        
                        output->WriteRaw(unknown_fields().data(),
                                         unknown_fields().size());
                        // @@protoc_insertion_point(serialize_end:jsbn.protoc.LoginResponse)
                    }
                    
                    int LoginResponse::ByteSize() const {
                        int total_size = 0;
                        
                        if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
                            // required fixed32 result = 1;
                            if (has_result()) {
                                total_size += 1 + 4;
                            }
                            
                            // optional bytes error_description = 2;
                            if (has_error_description()) {
                                total_size += 1 +
                                ::google::protobuf::internal::WireFormatLite::BytesSize(
                                                                                        this->error_description());
                            }
                            
                        }
                        total_size += unknown_fields().size();
                        
                        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
                        _cached_size_ = total_size;
                        GOOGLE_SAFE_CONCURRENT_WRITES_END();
                        return total_size;
                    }
                    
                    void LoginResponse::CheckTypeAndMergeFrom(
                                                              const ::google::protobuf::MessageLite& from) {
                        MergeFrom(*::google::protobuf::down_cast<const LoginResponse*>(&from));
                    }
                    
                    void LoginResponse::MergeFrom(const LoginResponse& from) {
                        GOOGLE_CHECK_NE(&from, this);
                        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
                            if (from.has_result()) {
                                set_result(from.result());
                            }
                            if (from.has_error_description()) {
                                set_error_description(from.error_description());
                            }
                        }
                        mutable_unknown_fields()->append(from.unknown_fields());
                    }
                    
                    void LoginResponse::CopyFrom(const LoginResponse& from) {
                        if (&from == this) return;
                        Clear();
                        MergeFrom(from);
                    }
                    
                    bool LoginResponse::IsInitialized() const {
                        if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
                        
                        return true;
                    }
                    
                    void LoginResponse::Swap(LoginResponse* other) {
                        if (other != this) {
                            std::swap(result_, other->result_);
                            std::swap(error_description_, other->error_description_);
                            std::swap(_has_bits_[0], other->_has_bits_[0]);
                            _unknown_fields_.swap(other->_unknown_fields_);
                            std::swap(_cached_size_, other->_cached_size_);
                        }
                    }
                    
                    ::std::string LoginResponse::GetTypeName() const {
                        return "jsbn.protoc.LoginResponse";
                    }
                    
                    
                    // ===================================================================
                    
#ifndef _MSC_VER
                    const int BSSNetProtocol::kTypeFieldNumber;
                    const int BSSNetProtocol::kLoginrequestFieldNumber;
                    const int BSSNetProtocol::kLoginresponseFieldNumber;
#endif  // !_MSC_VER
                    
                    BSSNetProtocol::BSSNetProtocol()
                    : ::google::protobuf::MessageLite() {
                        SharedCtor();
                        // @@protoc_insertion_point(constructor:jsbn.protoc.BSSNetProtocol)
                    }
                    
                    void BSSNetProtocol::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
                        loginrequest_ = const_cast< ::jsbn::protoc::LoginRequest*>(
                                                                                   ::jsbn::protoc::LoginRequest::internal_default_instance());
#else
                        loginrequest_ = const_cast< ::jsbn::protoc::LoginRequest*>(&::jsbn::protoc::LoginRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
                        loginresponse_ = const_cast< ::jsbn::protoc::LoginResponse*>(
                                                                                     ::jsbn::protoc::LoginResponse::internal_default_instance());
#else
                        loginresponse_ = const_cast< ::jsbn::protoc::LoginResponse*>(&::jsbn::protoc::LoginResponse::default_instance());
#endif
                    }
                    
                    BSSNetProtocol::BSSNetProtocol(const BSSNetProtocol& from)
                    : ::google::protobuf::MessageLite() {
                        SharedCtor();
                        MergeFrom(from);
                        // @@protoc_insertion_point(copy_constructor:jsbn.protoc.BSSNetProtocol)
                    }
                    
                    void BSSNetProtocol::SharedCtor() {
                        _cached_size_ = 0;
                        type_ = 0;
                        loginrequest_ = NULL;
                        loginresponse_ = NULL;
                        ::memset(_has_bits_, 0, sizeof(_has_bits_));
                    }
                    
                    BSSNetProtocol::~BSSNetProtocol() {
                        // @@protoc_insertion_point(destructor:jsbn.protoc.BSSNetProtocol)
                        SharedDtor();
                    }
                    
                    void BSSNetProtocol::SharedDtor() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
                        if (this != &default_instance()) {
#else
                            if (this != default_instance_) {
#endif
                                delete loginrequest_;
                                delete loginresponse_;
                            }
                        }
                        
                        void BSSNetProtocol::SetCachedSize(int size) const {
                            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
                            _cached_size_ = size;
                            GOOGLE_SAFE_CONCURRENT_WRITES_END();
                        }
                        const BSSNetProtocol& BSSNetProtocol::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
                            protobuf_AddDesc_jsbn_5fbss_2eproto();
#else
                            if (default_instance_ == NULL) protobuf_AddDesc_jsbn_5fbss_2eproto();
#endif
                            return *default_instance_;
                        }
                        
                        BSSNetProtocol* BSSNetProtocol::default_instance_ = NULL;
                        
                        BSSNetProtocol* BSSNetProtocol::New() const {
                            return new BSSNetProtocol;
                        }
                        
                        void BSSNetProtocol::Clear() {
                            if (_has_bits_[0 / 32] & 7) {
                                type_ = 0;
                                if (has_loginrequest()) {
                                    if (loginrequest_ != NULL) loginrequest_->::jsbn::protoc::LoginRequest::Clear();
                                }
                                if (has_loginresponse()) {
                                    if (loginresponse_ != NULL) loginresponse_->::jsbn::protoc::LoginResponse::Clear();
                                }
                            }
                            ::memset(_has_bits_, 0, sizeof(_has_bits_));
                            mutable_unknown_fields()->clear();
                        }
                        
                        bool BSSNetProtocol::MergePartialFromCodedStream(
                                                                         ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
                            ::google::protobuf::uint32 tag;
                            ::google::protobuf::io::StringOutputStream unknown_fields_string(
                                                                                             mutable_unknown_fields());
                            ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
                                                                                            &unknown_fields_string);
                            // @@protoc_insertion_point(parse_start:jsbn.protoc.BSSNetProtocol)
                            for (;;) {
                                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
                                tag = p.first;
                                if (!p.second) goto handle_unusual;
                                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                                        // required .jsbn.protoc.MSG type = 1;
                                    case 1: {
                                        if (tag == 8) {
                                            int value;
                                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                                 int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                                                                                                               input, &value)));
                                            if (::jsbn::protoc::MSG_IsValid(value)) {
                                                set_type(static_cast< ::jsbn::protoc::MSG >(value));
                                            } else {
                                                unknown_fields_stream.WriteVarint32(tag);
                                                unknown_fields_stream.WriteVarint32(value);
                                            }
                                        } else {
                                            goto handle_unusual;
                                        }
                                        if (input->ExpectTag(26)) goto parse_loginrequest;
                                        break;
                                    }
                                        
                                        // optional .jsbn.protoc.LoginRequest loginrequest = 3;
                                    case 3: {
                                        if (tag == 26) {
                                        parse_loginrequest:
                                            DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                                                                                                                   input, mutable_loginrequest()));
                                        } else {
                                            goto handle_unusual;
                                        }
                                        if (input->ExpectTag(34)) goto parse_loginresponse;
                                        break;
                                    }
                                        
                                        // optional .jsbn.protoc.LoginResponse loginresponse = 4;
                                    case 4: {
                                        if (tag == 34) {
                                        parse_loginresponse:
                                            DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                                                                                                                   input, mutable_loginresponse()));
                                        } else {
                                            goto handle_unusual;
                                        }
                                        if (input->ExpectAtEnd()) goto success;
                                        break;
                                    }
                                        
                                    default: {
                                    handle_unusual:
                                        if (tag == 0 ||
                                            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                                            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                                            goto success;
                                        }
                                        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                                                                                                    input, tag, &unknown_fields_stream));
                                        break;
                                    }
                                }
                            }
                        success:
                            // @@protoc_insertion_point(parse_success:jsbn.protoc.BSSNetProtocol)
                            return true;
                        failure:
                            // @@protoc_insertion_point(parse_failure:jsbn.protoc.BSSNetProtocol)
                            return false;
#undef DO_
                        }
                        
                        void BSSNetProtocol::SerializeWithCachedSizes(
                                                                      ::google::protobuf::io::CodedOutputStream* output) const {
                            // @@protoc_insertion_point(serialize_start:jsbn.protoc.BSSNetProtocol)
                            // required .jsbn.protoc.MSG type = 1;
                            if (has_type()) {
                                ::google::protobuf::internal::WireFormatLite::WriteEnum(
                                                                                        1, this->type(), output);
                            }
                            
                            // optional .jsbn.protoc.LoginRequest loginrequest = 3;
                            if (has_loginrequest()) {
                                ::google::protobuf::internal::WireFormatLite::WriteMessage(
                                                                                           3, this->loginrequest(), output);
                            }
                            
                            // optional .jsbn.protoc.LoginResponse loginresponse = 4;
                            if (has_loginresponse()) {
                                ::google::protobuf::internal::WireFormatLite::WriteMessage(
                                                                                           4, this->loginresponse(), output);
                            }
                            
                            output->WriteRaw(unknown_fields().data(),
                                             unknown_fields().size());
                            // @@protoc_insertion_point(serialize_end:jsbn.protoc.BSSNetProtocol)
                        }
                        
                        int BSSNetProtocol::ByteSize() const {
                            int total_size = 0;
                            
                            if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
                                // required .jsbn.protoc.MSG type = 1;
                                if (has_type()) {
                                    total_size += 1 +
                                    ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
                                }
                                
                                // optional .jsbn.protoc.LoginRequest loginrequest = 3;
                                if (has_loginrequest()) {
                                    total_size += 1 +
                                    ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                                                                                                       this->loginrequest());
                                }
                                
                                // optional .jsbn.protoc.LoginResponse loginresponse = 4;
                                if (has_loginresponse()) {
                                    total_size += 1 +
                                    ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                                                                                                       this->loginresponse());
                                }
                                
                            }
                            total_size += unknown_fields().size();
                            
                            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
                            _cached_size_ = total_size;
                            GOOGLE_SAFE_CONCURRENT_WRITES_END();
                            return total_size;
                        }
                        
                        void BSSNetProtocol::CheckTypeAndMergeFrom(
                                                                   const ::google::protobuf::MessageLite& from) {
                            MergeFrom(*::google::protobuf::down_cast<const BSSNetProtocol*>(&from));
                        }
                        
                        void BSSNetProtocol::MergeFrom(const BSSNetProtocol& from) {
                            GOOGLE_CHECK_NE(&from, this);
                            if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
                                if (from.has_type()) {
                                    set_type(from.type());
                                }
                                if (from.has_loginrequest()) {
                                    mutable_loginrequest()->::jsbn::protoc::LoginRequest::MergeFrom(from.loginrequest());
                                }
                                if (from.has_loginresponse()) {
                                    mutable_loginresponse()->::jsbn::protoc::LoginResponse::MergeFrom(from.loginresponse());
                                }
                            }
                            mutable_unknown_fields()->append(from.unknown_fields());
                        }
                        
                        void BSSNetProtocol::CopyFrom(const BSSNetProtocol& from) {
                            if (&from == this) return;
                            Clear();
                            MergeFrom(from);
                        }
                        
                        bool BSSNetProtocol::IsInitialized() const {
                            if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
                            
                            if (has_loginrequest()) {
                                if (!this->loginrequest().IsInitialized()) return false;
                            }
                            if (has_loginresponse()) {
                                if (!this->loginresponse().IsInitialized()) return false;
                            }
                            return true;
                        }
                        
                        void BSSNetProtocol::Swap(BSSNetProtocol* other) {
                            if (other != this) {
                                std::swap(type_, other->type_);
                                std::swap(loginrequest_, other->loginrequest_);
                                std::swap(loginresponse_, other->loginresponse_);
                                std::swap(_has_bits_[0], other->_has_bits_[0]);
                                _unknown_fields_.swap(other->_unknown_fields_);
                                std::swap(_cached_size_, other->_cached_size_);
                            }
                        }
                        
                        ::std::string BSSNetProtocol::GetTypeName() const {
                            return "jsbn.protoc.BSSNetProtocol";
                        }
                        
                        
                        // @@protoc_insertion_point(namespace_scope)
                        
                    }  // namespace protoc
                }  // namespace jsbn
                
                // @@protoc_insertion_point(global_scope)
